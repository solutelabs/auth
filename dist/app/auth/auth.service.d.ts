import { JwtService } from '@nestjs/jwt';
import { IAuthResponse } from './interface';
import { LoginDto, MagicLinkDto, MobileDto, SignupDto } from './dto';
import { Repository } from 'typeorm';
import { UserEntity } from './entity';
import { ClientProxy } from '@nestjs/microservices';
import { MagicLinkResponse } from './model';
import { OtpService } from './otp/otp.service';
import { CountryService } from '../country/country.service';
export declare class AuthService {
    private userRepository;
    private readonly jwtService;
    private readonly otpService;
    private readonly countryService;
    private readonly client;
    private readonly assetClient;
    private oauthClient;
    private TwilioClient;
    constructor(userRepository: Repository<UserEntity>, jwtService: JwtService, otpService: OtpService, countryService: CountryService, client: ClientProxy, assetClient: ClientProxy);
    signup(data: SignupDto): Promise<IAuthResponse>;
    login(data: LoginDto): Promise<IAuthResponse>;
    GoogleAuthSignUp(data: any): Promise<IAuthResponse>;
    GoogleAuthSigIn(data: any): Promise<IAuthResponse>;
    LinkGoogleAccount(data: any, user: UserEntity): Promise<string>;
    twitterUser(data: any): Promise<IAuthResponse>;
    LinkTwitterAccount(twitterUser: any, user: UserEntity): Promise<string>;
    facebookUser(data: any): Promise<IAuthResponse>;
    LinkFacebookAccount(facebookUser: any, user: UserEntity): Promise<string>;
    generateMagicLink(data: MagicLinkDto): Promise<MagicLinkResponse>;
    loginViaMagicLink(token: string): Promise<IAuthResponse>;
    validateUserEmail(email: string): Promise<UserEntity>;
    validateUserContact(contact: string): Promise<void>;
    findByEmail(email: string): Promise<UserEntity | undefined>;
    findById(id: string): Promise<UserEntity | undefined>;
    findByEmailAndProvider(email: string, provider: string): Promise<UserEntity | undefined>;
    createSocialUser(email: string, provider: string, firstname: string, lastname: string): Promise<UserEntity>;
    generateRandomToken(): Promise<string>;
    isTokenPresentInAnotherUser(token: string): Promise<string>;
    getAuthResponse(userId: string, role: string): Promise<IAuthResponse>;
    findByContact(contact: string): Promise<UserEntity | undefined>;
    updateContact(user: UserEntity, data: MobileDto): Promise<IAuthResponse>;
    refreshToken(refreshToken: any): Promise<IAuthResponse>;
    signupMobile(data: MobileDto): Promise<IAuthResponse>;
    loginMobile(data: MobileDto): Promise<IAuthResponse>;
    appleLogin(data: any): Promise<IAuthResponse>;
    whatsappSignup(data: MobileDto): Promise<IAuthResponse>;
    loginWhatsApp(data: MobileDto): Promise<IAuthResponse>;
}
